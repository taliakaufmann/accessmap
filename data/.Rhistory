plot(points_in_poly)
tapply(pts.poly@data$walking_duration_value_format, pts.poly@data$id, FUN=mean)
another_join <- over(pt, gridded_pop_boston_city_polygons, fn = mean(walking_duration_value_format))
another_join <- over(pt, gridded_pop_boston_city_polygons, fn = mean(pt@data$walking_duration_value_format))
another_join <- over(pt, gridded_pop_boston_city_polygons, function() = mean(pt@data$walking_duration_value_format))
plot(pt)
plot(gridded_pop_boston_city_polygons, add=T)
plot(gridded_pop_boston_city_polygons, add=True)
plot(gridded_pop_boston_city_polygons)
plot(pt, add = TRUE)
library(ggplot2)
library(ggmap)
bbox.boston <- make_bbox(destination_x, destination_y, distances_analysis, f = 0.01)
boston.map <- get_map(location = bbox.boston, zoom=12, color = 'bw', crop = TRUE)
boston.ggmap <- ggmap(boston.map, extent = 'device', legend = 'right')
amenities.boston <- boston.ggmap +geom_point(aes(x = destination_x, y = destination_y, colour=category), data = distances_analysis, alpha=0.8, size=2)+
geom_polygon(data=gridded_pop_boston_polygons@polygons)
amenities.boston <- boston.ggmap +geom_point(aes(x = destination_x, y = destination_y, colour=category), data = distances_analysis, alpha=0.8, size=2)+
geom_polygon(data=gridded_pop_boston_polygons)
amenities.boston <- boston.ggmap +geom_point(aes(x = destination_x, y = destination_y, colour=category), data = distances_analysis, alpha=0.8, size=2)
amenities.boston <- boston.ggmap +geom_point(aes(x = destination_x, y = destination_y, colour=category), data = distances_analysis, alpha=0.8, size=2)+
geom_polygon(data=gridded_pop_boston_polygons)
amenities.boston
plot(amenities.boston)
amenities.boston <- boston.ggmap +geom_point(aes(x = destination_x, y = destination_y, colour=category), data = distances_analysis, alpha=0.8, size=2)
plot(amenities.boston)
pt <- SpatialPointsDataFrame(coords = distances_analysis[,c("origin_x","origin_y")], data = distances_analysis,
proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
gridded_pop_boston_polygons@data <- mutate(gridded_pop_boston_polygons@data, id_grid = as.numeric(rownames(gridded_pop_boston_polygons@data)))
pt@data <- mutate(pt@data, id_point = as.numeric(rownames(pt@data)))
points_in_poly <- over(pt, gridded_pop_boston_polygons)
points_in_poly <- mutate(points_in_poly, id_point = as.numeric(rownames(points_in_poly)))
View(points_in_poly)
head(pt@data$id_point)
max(pt@data$id_point)
points_in_poly <- left_join(pt@data, points_in_poly, by = c("id_point" = "id_point"))
max(gridded_pop_boston_polygons@data$id_grid)
gridded_pop_boston_city_polygons@data <- mutate(gridded_pop_boston_city_polygons@data, id_grid = as.numeric(rownames(gridded_pop_boston_city_polygons@data)))
pt@data <- mutate(pt@data, id_point = as.numeric(rownames(pt@data)))
points_in_poly <- over(pt, gridded_pop_boston_city_polygons)
points_in_poly <- mutate(points_in_poly, id_point = as.numeric(rownames(points_in_poly)))
points_in_poly <- left_join(pt@data, points_in_poly, by = c("id_point" = "id_point"))
access_mean_cell <- points_in_poly %>% group_by(id_grid,category) %>%
summarise(mean_walking_time = mean(walking_duration_value_format), countPoints =n()) %>%
arrange(id_grid)
View(access_mean_cell)
View(access_mean_cell)
gridded_pop_boston_city_polygons@data <- left_join(gridded_pop_boston_city_polygons@data, access_mean_cell, by = c("id_grid" = "id_grid"))
View(gridded_pop_boston_city_polygons@data)
gridded_pop_boston_city_polygons.fort <- fortify(gridded_pop_boston_city_polygons@data, region="id_grid")
gridded_pop_boston_city_polygons.fort <- merge(gridded_pop_boston_city_polygons.fort, gridded_pop_boston_city_polygons@data, by="id_grid")
head(gridded_pop_boston_city_polygons.fort)
gridded_pop_boston_city_polygons.fort <- fortify(gridded_pop_boston_city_polygons@data, region="id_grid")
gridded_pop_boston_city_polygons.fort_merge <- join(gridded_pop_boston_city_polygons.fort, gridded_pop_boston_city_polygons@data, by="id_grid")
library(plyr)
gridded_pop_boston_city_polygons.fort_merge <- join(gridded_pop_boston_city_polygons.fort, gridded_pop_boston_city_polygons@data, by="id_grid")
head(gridded_pop_boston_city_polygons.fort_merge)
View(gridded_pop_boston_city_polygons.fort_merge)
gridded_pop_boston_city_polygons.df <- as.data.frame(gridded_pop_boston_city_polygons)
gridded_pop_boston_city_polygons.fort <- fortify(gridded_pop_boston_city_polygons, region="id_grid")
install.packages('maptools')
install.packages('maptools')
gridded_pop_boston_city_polygons.fort <- fortify(gridded_pop_boston_city_polygons, region="id_grid")
row.names(gridded_pop_boston_city_polygons@data)
access_mean_cell_all <- points_in_poly %>% group_by(id_grid) %>%
summarise(mean_walking_time = mean(walking_duration_value_format), countPoints =n()) %>%
arrange(id_grid)
access_mean_cell_all <- points_in_poly %>% group_by(id_grid) %>%
summarise(mean_walking_time = mean(walking_duration_value_format), countPoints =count(place_id)) %>%
arrange(id_grid)
access_mean_cell_all <- points_in_poly %>% group_by(id_grid) %>%
summarise(mean_walking_time = mean(walking_duration_value_format)) %>%
arrange(id_grid)
gridded_pop_boston_city_polygons@data <- mutate(gridded_pop_boston_city_polygons@data, id_grid = as.numeric(rownames(gridded_pop_boston_city_polygons@data)))
pt@data <- mutate(pt@data, id_point = as.numeric(rownames(pt@data)))
points_in_poly <- over(pt, gridded_pop_boston_city_polygons)
# the order didn't change so re add id_bus to the new table
points_in_poly <- mutate(points_in_poly, id_point = as.numeric(rownames(points_in_poly)))
#Now join each original business to its grid location
points_in_poly <- left_join(pt@data, points_in_poly, by = c("id_point" = "id_point"))
access_mean_cell_all <- points_in_poly %>% group_by(id_grid) %>%
summarise(mean_walking_time = mean(walking_duration_value_format), countPoints =count(place_id)) %>%
arrange(id_grid)
access_mean_cell_all <- points_in_poly %>% group_by(id_grid) %>%
summarise(mean_walking_time = mean(walking_duration_value_format)) %>%
arrange(id_grid)
points_in_poly
View(points_in_poly)
pt <- SpatialPointsDataFrame(coords = distances_analysis[,c("origin_x","origin_y")], data = distances_analysis,
proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
gridded_pop_boston_city_polygons <- rasterToPolygons(gridded_pop_boston_city, fun=NULL, n=4, na.rm=TRUE, digits=12, dissolve=FALSE)
gridded_pop_boston_city_polygons@data <- na.omit(gridded_pop_boston_city_polygons@data)
gridded_pop_boston_city_polygons <- gridded_pop_boston_city_polygons[gridded_pop_boston_city_polygons@data$gpw.v4.population.count_2015 > 0,]
gridded_pop_boston_city_polygons@data <- mutate(gridded_pop_boston_city_polygons@data, id_grid = as.numeric(rownames(gridded_pop_boston_city_polygons@data)))
pt@data <- mutate(pt@data, id_point = as.numeric(rownames(pt@data)))
points_in_poly <- over(pt, gridded_pop_boston_city_polygons)
points_in_poly <- mutate(points_in_poly, id_point = as.numeric(rownames(points_in_poly)))
points_in_poly <- left_join(pt@data, points_in_poly, by = c("id_point" = "id_point"))
access_mean_cell <- points_in_poly %>% group_by(id_grid,category) %>%
summarise(mean_walking_time = mean(walking_duration_value_format), countPoints =n()) %>%
arrange(id_grid)
access_mean_cell <- points_in_poly %>% group_by(id_grid,category) %>%
summarise(mean_walking_time = mean(walking_duration_value_format)) %>%
arrange(id_grid)
View()
View(points_in_poly)
access_mean_cell_all <- points_in_poly %>% group_by(id_grid) %>%
summarise(mean_walking_time = mean(walking_duration_value_format)) %>%
arrange(id_grid)
access_mean_cell_all <- points_in_poly %>% group_by(id_grid)
View(access_mean_cell_all)
View(access_mean_cell_all)
View(points_in_poly)
access_mean_cell_all <- points_in_poly %>% group_by(id_grid) %>%
summarise(mean_walking_time = sum(place_id)) %>%
arrange(id_grid)
access_mean_cell_all <- points_in_poly %>% group_by(id_grid) %>%
summarise(mean_walking_time = count(place_id)) %>%
arrange(id_grid)
access_mean_cell_all <- points_in_poly %>% group_by(id_grid) %>%
summarise(mean_walking_time = mean(walking_duration_value_format))
View(access_mean_cell_all)
library(dplyr)
access_mean_cell_all <- points_in_poly %>% group_by(id_grid) %>%
summarise(mean_walking_time = mean(walking_duration_value_format))
access_mean_cell_all <- points_in_poly %>% group_by(id_grid) %>%
summarise(mean_walking_time = mean(walking_duration_value_format)) %>%
arrange(id_grid)
library(dplyr)
access_mean_cell_all <- points_in_poly %>% group_by(id_grid) %>%
summarise(mean_walking_time = mean(walking_duration_value_format)) %>%
arrange(id_grid)
View(access_mean_cell_all)
boston_ceels <- gridded_pop_boston_city_polygons
boston_cells <- gridded_pop_boston_city_polygons
rm(boston_ceels)
boston_cells@data <- left_join(boston_cells@data, access_mean_cell, by = c("id_grid" = "id_grid"))
boston_cells.fort <- fortify(boston_cells, region="id_grid")
library(gpclib)
install.packages('gpclib')
boston_cells.fort <- fortify(boston_cells, region="id_grid")
library(gpclib)
boston_cells.fort <- fortify(boston_cells, region="id_grid")
library(gpclib)
boston_cells.fort <- fortify(boston_cells, region="id_grid")
boston_cells.fort <- ggplot2::fortify(boston_cells, region="id_grid")
library(ggplot2)
boston_cells.fort <- ggplot2::fortify(boston_cells, region="id_grid")
gridded_pop_boston_city_polygons@data <- na.omit(gridded_pop_boston_city_polygons@data)
gridded_pop_boston_city_polygons <- rasterToPolygons(gridded_pop_boston_city, fun=NULL, n=4, na.rm=TRUE, digits=12, dissolve=FALSE)
gridded_pop_boston_city_polygons@data <- na.omit(gridded_pop_boston_city_polygons@data)
gridded_pop_boston_city_polygons <- gridded_pop_boston_city_polygons[gridded_pop_boston_city_polygons@data$gpw.v4.population.count_2015 > 0,]
boston_cells <- gridded_pop_boston_city_polygons
boston_cells@data <- mutate(boston_cells@data, id_grid = as.numeric(rownames(boston_cells@data)))
pt@data <- mutate(pt@data, id_point = as.numeric(rownames(pt@data)))
points_in_poly <- over(pt, boston_cells)
points_in_poly <- mutate(points_in_poly, id_point = as.numeric(rownames(points_in_poly)))
points_in_poly <- left_join(pt@data, points_in_poly, by = c("id_point" = "id_point"))
access_mean_cell_all <- points_in_poly %>% group_by(id_grid) %>%
summarise(mean_walking_time = mean(walking_duration_value_format)) %>%
arrange(id_grid)
boston_cells@data <- left_join(boston_cells@data, access_mean_cell, by = c("id_grid" = "id_grid"))
boston_cells.fort <- ggplot2::fortify(boston_cells, region="id_grid")
View(boston_cells)
access_mean_cell_all <- points_in_poly %>% group_by(id_grid) %>%
summarise(mean_walking_time = mean(walking_duration_value_format)) %>%
arrange(id_grid)
View(access_mean_cell_all)
boston_cells@data <- left_join(boston_cells@data, access_mean_cell_all, by = c("id_grid" = "id_grid"))
boston_cells.fort <- ggplot2::fortify(boston_cells, region="id_grid")
View(boston_cells)
boston_cells <- gridded_pop_boston_city_polygons
# Set a unique identifier for both of the data frames
boston_cells@data <- mutate(boston_cells@data, id_grid = as.numeric(rownames(boston_cells@data)))
pt@data <- mutate(pt@data, id_point = as.numeric(rownames(pt@data)))
View(boston_cells@data)
points_in_poly <- over(pt, boston_cells)
points_in_poly <- mutate(points_in_poly, id_point = as.numeric(rownames(points_in_poly)))
points_in_poly <- left_join(pt@data, points_in_poly, by = c("id_point" = "id_point"))
access_mean_cell_all <- points_in_poly %>% group_by(id_grid) %>%
summarise(mean_walking_time = mean(walking_duration_value_format)) %>%
arrange(id_grid)
View(access_mean_cell_all)
boston_cells@data <- left_join(boston_cells@data, access_mean_cell_all, by = c("id_grid" = "id_grid"))
boston_cells.fort <- ggplot2::fortify(boston_cells, region="id_grid")
boston_cells.fort_merge <- join(gridded_pop_boston_city_polygons.fort, boston_cells@data, by="id_grid")
boston_cells.fort_merge <- merge(gridded_pop_boston_city_polygons.fort, boston_cells@data, by="id_grid")
access.boston <- boston.ggmap + ggplot(boston_cells.fort_merge, aes(x=long, y=lat, group=group))+
geom_polygon(aes(fill=mean_walking_time))
access.boston <- boston.ggmap + ggplot(boston_cells.fort_merge, aes(x=long, y=lat, group=group))
View()
View(boston_cells.fort)
boston_cells.fort_merge <- merge(boston_cells.fort, boston_cells@data, by="id_grid")
View(boston_cells.fort)
boston_cells.fort <- ggplot2::fortify(boston_cells, region="id_grid")
boston_cells.fort_merge <- merge(boston_cells.fort, boston_cells@data, by="id_grid")
View(boston_cells.fort)
boston_cells.fort$id
boston_cells.fort_merge <- merge(boston_cells.fort, boston_cells@data, by.x="id", by.y="id_grid")
View(boston_cells.fort_merge)
View(boston_cells.fort_merge)
boston_cells.fort_merge$group
access.boston <- boston.ggmap + ggplot(boston_cells.fort_merge, aes(x=long, y=lat, group=group))+
geom_polygon(aes(fill=mean_walking_time))
access.boston <- boston.ggmap + ggplot(boston_cells.fort_merge, aes(x=long, y=lat, group=group))
library(ggmap)
bbox.boston <- make_bbox(destination_x, destination_y, distances_analysis, f = 0.01)
boston.map <- get_map(location = bbox.boston, zoom=12, color = 'bw', crop = TRUE)
boston.ggmap <- ggmap(boston.map, extent = 'device', legend = 'right')
access.boston <- boston.ggmap + ggplot(boston_cells.fort_merge, aes(x=long, y=lat, group=group))+
geom_polygon(aes(fill=mean_walking_time))
access.boston <- ggplot(boston_cells.fort_merge, aes(x=long, y=lat, group=group))+
geom_polygon(aes(fill=mean_walking_time))
access.boston
boston.ggmap
amenities.boston <- boston.ggmap +geom_point(aes(x = destination_x, y = destination_y, colour=category), data = distances_analysis, alpha=0.8, size=2)+
amenities.boston <- boston.ggmap +geom_point(aes(x = destination_x, y = destination_y, colour=category), data = distances_analysis, alpha=0.8, size=2)
access.boston <- ggplot(boston_cells.fort_merge, aes(x=long, y=lat, group=group))+
geom_polygon(aes(fill=mean_walking_time)) +boston.ggmap
access.boston <- boston.ggmap + geom_polygon(data=boston_cells.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time))
access.boston
access.boston <- boston.ggmap + geom_polygon(data=boston_cells.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.8)
access.boston
access.boston <- boston.ggmap + geom_polygon(data=boston_cells.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.9)
access.boston
access_mean_cell <- points_in_poly %>% group_by(id_grid,category) %>%
summarise(mean_walking_time = mean(walking_duration_value_format)) %>%
arrange(id_grid)
View(access_mean_cell)
View(access_mean_cell)
boston_cells@data <- left_join(boston_cells@data, access_mean_cell, by = c("id_grid" = "id_grid"))
boston_cells.fort <- ggplot2::fortify(boston_cells, region="id_grid")
access_mean_cell_all <- points_in_poly %>% group_by(id_grid) %>%
summarise(mean_walking_time = mean(walking_duration_value_format)) %>%
arrange(id_grid)
boston_cells@data <- left_join(boston_cells@data, access_mean_cell, by = c("id_grid" = "id_grid"))
boston_cells.fort <- ggplot2::fortify(boston_cells, region="id_grid")
boston_cells <- gridded_pop_boston_city_polygons
# Set a unique identifier for both of the data frames
boston_cells@data <- mutate(boston_cells@data, id_grid = as.numeric(rownames(boston_cells@data)))
pt@data <- mutate(pt@data, id_point = as.numeric(rownames(pt@data)))
# The businesses get the value of the grid they are on top of
points_in_poly <- over(pt, boston_cells)
# the order didn't change so re add id_bus to the new table
points_in_poly <- mutate(points_in_poly, id_point = as.numeric(rownames(points_in_poly)))
#Now join each original business to its grid location
points_in_poly <- left_join(pt@data, points_in_poly, by = c("id_point" = "id_point"))
access_mean_cell_all <- points_in_poly %>% group_by(id_grid) %>%
summarise(mean_walking_time = mean(walking_duration_value_format)) %>%
arrange(id_grid)
boston_cells@data <- left_join(boston_cells@data, access_mean_cell_all, by = c("id_grid" = "id_grid"))
boston_cells.fort <- ggplot2::fortify(boston_cells, region="id_grid")
boston_cells.fort_merge <- merge(boston_cells.fort, boston_cells@data, by.x="id", by.y="id_grid")
access_mean_cell <- points_in_poly %>% group_by(id_grid,category) %>%
summarise(mean_walking_time = mean(walking_duration_value_format)) %>%
arrange(id_grid)
View(access_mean_cell)
View(access_mean_cell)
View(boston_cells.fort_merge)
View(access_mean_cell)
distances_analysis_grocery <- subset(distances_analysis, category=="grocery_or_supermarket")
access.boston_groc <- boston.ggmap + geom_polygon(data=boston_cells_groc.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.9)
+scale_colour_brewer()
distances_analysis_grocery <- subset(distances_analysis, category=="grocery_or_supermarket")
#spatial points for destination data
pt_groc <- SpatialPointsDataFrame(coords = distances_analysis_grocery[,c("origin_x","origin_y")], data = distances_analysis_grocery,
proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
boston_cells_groc <- gridded_pop_boston_city_polygons
# Set a unique identifier for both of the data frames
boston_cells_groc@data <- mutate(boston_cells_groc@data, id_grid = as.numeric(rownames(boston_cells_groc@data)))
pt_groc@data <- mutate(pt_groc@data, id_point = as.numeric(rownames(pt_groc@data)))
# The businesses get the value of the grid they are on top of
points_in_poly_groc <- over(pt_groc, boston_cells_groc)
# the order didn't change so re add id_bus to the new table
points_in_poly_groc <- mutate(points_in_poly_groc, id_point = as.numeric(rownames(points_in_poly)))
#Now join each original business to its grid location
points_in_poly_groc <- left_join(pt_groc@data, points_in_poly_groc, by = c("id_point" = "id_point"))
## Now we can aggregate the data
access_mean_cell_groc <- points_in_poly %>% group_by(id_grid) %>%
summarise(mean_walking_time = mean(walking_duration_value_format)) %>%
arrange(id_grid)
## Now you want to join it back to the grid data for mapping
# we are joining it straight to the missGrid spatial data frame
boston_cells_groc@data <- left_join(boston_cells_groc@data, access_mean_cell_groc, by = c("id_grid" = "id_grid"))
#plot
boston_cells_groc.fort <- ggplot2::fortify(boston_cells_groc, region="id_grid")
boston_cells_groc.fort_merge <- merge(boston_cells_groc.fort, boston_cells_groc@data, by.x="id", by.y="id_grid")
access.boston_groc <- boston.ggmap + geom_polygon(data=boston_cells_groc.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.9)
+scale_colour_brewer()
access.boston_groc <- boston.ggmap + geom_polygon(data=boston_cells_groc.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.9) +
scale_colour_brewer("Diamond\nclarity")
access.boston_groc
View(boston_cells_groc.fort_merge)
View(boston_cells.fort_merge)
View()
View(distances_analysis_grocery)
distances_analysis_grocery <- subset(distances_analysis, category=="grocery_or_supermarket")
#spatial points for destination data
pt_groc <- SpatialPointsDataFrame(coords = distances_analysis_grocery[,c("origin_x","origin_y")], data = distances_analysis_grocery,
proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
boston_cells_groc <- gridded_pop_boston_city_polygons
# Set a unique identifier for both of the data frames
boston_cells_groc@data <- mutate(boston_cells_groc@data, id_grid = as.numeric(rownames(boston_cells_groc@data)))
pt_groc@data <- mutate(pt_groc@data, id_point = as.numeric(rownames(pt_groc@data)))
# The businesses get the value of the grid they are on top of
points_in_poly_groc <- over(pt_groc, boston_cells_groc)
# the order didn't change so re add id_bus to the new table
points_in_poly_groc <- mutate(points_in_poly_groc, id_point = as.numeric(rownames(points_in_poly)))
#Now join each original business to its grid location
points_in_poly_groc <- left_join(pt_groc@data, points_in_poly_groc, by = c("id_point" = "id_point"))
## Now we can aggregate the data
access_mean_cell_groc <- points_in_poly %>% group_by(id_grid) %>%
summarise(mean_walking_time = mean(walking_duration_value_format)) %>%
arrange(id_grid)
## Now you want to join it back to the grid data for mapping
# we are joining it straight to the missGrid spatial data frame
boston_cells_groc@data <- left_join(boston_cells_groc@data, access_mean_cell_groc, by = c("id_grid" = "id_grid"))
#plot
boston_cells_groc.fort <- ggplot2::fortify(boston_cells_groc, region="id_grid")
boston_cells_groc.fort_merge <- merge(boston_cells_groc.fort, boston_cells_groc@data, by.x="id", by.y="id_grid")
access.boston_groc <- boston.ggmap + geom_polygon(data=boston_cells_groc.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.9)
View(access.boston_groc)
access.boston_groc
View(pt_groc@data)
View(points_in_poly_groc)
View(access_mean_cell_groc)
View(points_in_poly_groc)
View(access_mean_cell_groc)
access_mean_cell_groc <- subset(access_mean_cell, category=="grocery_or_supermarket")
boston_cells_groc <- boston_cells
boston_cells_groc@data <- left_join(boston_cells_groc@data, access_mean_cell_groc, by = c("id_grid" = "id_grid"))
boston_cells_groc.fort <- ggplot2::fortify(boston_cells_groc, region="id_grid")
boston_cells_groc.fort_merge <- merge(boston_cells_groc.fort, boston_cells_groc@data, by.x="id", by.y="id_grid")
access.boston_groc <- boston.ggmap + geom_polygon(data=boston_cells_groc.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.9)
access.boston_groc
boston_cells_groc@data <- left_join(boston_cells_groc@data, access_mean_cell_groc, by = c("id_grid" = "id_grid"))
boston_cells_groc@data
View(boston_cells_groc@data)
boston_cells_groc.fort <- ggplot2::fortify(boston_cells_groc, region="id_grid")
boston_cells_groc.fort_merge <- merge(boston_cells_groc.fort, boston_cells_groc@data, by.x="id", by.y="id_grid")
View(boston_cells_groc@data)
View(boston_cells_groc.fort_merge)
access.boston_groc <- boston.ggmap + geom_polygon(data=boston_cells_groc.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.9)
access.boston_groc
access.boston_groc <- boston.ggmap + geom_polygon(data=boston_cells_groc.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.9) +
scale_colour_brewer(palette = "Greens")
access.boston_groc
access.boston_groc <- boston.ggmap + geom_polygon(data=boston_cells_groc.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.9, colour = "red")
access.boston_groc
access.boston_groc <- boston.ggmap + geom_polygon(data=boston_cells_groc.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time, colour = "red"), alpha=0.9)
access.boston_groc
access.boston_groc <- boston.ggmap + geom_polygon(data=boston_cells_groc.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.9) +
scale_colour_brewer(palette="Oranges")
access.boston_groc
install.packages('RColorBrewer')
library(RColorBrewer)
my_orange = brewer.pal(n = 9, "Oranges")[3:9]
access.boston_groc <- boston.ggmap + geom_polygon(data=boston_cells_groc.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.9) +
scale_colour_manual(values=my_orange)
access.boston_groc
access.boston_groc <- boston.ggmap + geom_polygon(data=boston_cells_groc.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.9) +
scale_fill_brewer('palette'="Set3")
access.boston_groc
RColorBrewer::display.brewer.all()
access.boston_groc <- boston.ggmap + geom_polygon(data=boston_cells_groc.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.9) +
scale_colour_brewer(palette=my_orange)
access.boston_groc <- boston.ggmap + geom_polygon(data=boston_cells_groc.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.9) +
scale_fill_gradient(palette="Oranges")
access.boston_groc
access.boston_groc <- boston.ggmap + geom_polygon(data=boston_cells_groc.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.9) +
scale_fill_gradient(low = "plum1", high = "purple4")
access.boston_groc
access.boston_groc <- boston.ggmap + geom_polygon(data=boston_cells_groc.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.9) +
#scale_fill_gradient(low = "plum1", high = "purple4")+
scale_fill_brewer(palette = "Oranges")
access.boston_groc
access.boston <- boston.ggmap + geom_polygon(data=boston_cells.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.9)+
scale_fill_gradient(low = "lightskyblue1", high = "deepskyblue4")
access.boston
access.boston <- boston.ggmap + geom_polygon(data=boston_cells.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.75)+
scale_fill_gradient(low = "lightskyblue1", high = "deepskyblue4") + theme(legend.position = "bottom")
access.boston
access.boston <- boston.ggmap + geom_polygon(data=boston_cells.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.8)+
scale_fill_gradient(low = "lightskyblue1", high = "deepskyblue4") + theme(legend.position = "bottom")
access.boston <- boston.ggmap + geom_polygon(data=boston_cells.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.8)+
scale_fill_gradient(low = "lightskyblue1", high = "deepskyblue4", name='walking duration (minutes)') +
theme(legend.position = "bottom", element_text(size = 12, colour = 'darkgrey'))
access.boston <- boston.ggmap + geom_polygon(data=boston_cells.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.8)+
scale_fill_gradient(low = "lightskyblue1", high = "deepskyblue4", name='walking duration (minutes)') +
theme(legend.position = "bottom", legend.text = element_text(size = 12, colour = 'darkgrey'))
access.boston
access.boston <- boston.ggmap + geom_polygon(data=boston_cells.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.9)+
scale_fill_gradient(low = "lightskyblue1", high = "deepskyblue4", name='walking duration (minutes)') +
theme(legend.position = "bottom", legend.text = element_text(size = 15, colour = 'darkgrey'))
access.boston
access.boston <- boston.ggmap + geom_polygon(data=boston_cells.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.9)+
scale_fill_gradient(low = "lightskyblue1", high = "deepskyblue4", name='walking duration (minutes)') +
theme(legend.position = "bottom", legend.text = element_text(size = 12, colour = 'darkgrey'),
legend.title = element_text(size=15))
access.boston
access.boston <- boston.ggmap + geom_polygon(data=boston_cells.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.87)+
scale_fill_gradient(low = "lightskyblue1", high = "deepskyblue4", name='walking duration (minutes)') +
theme(legend.position = "bottom", legend.text = element_text(size = 12),
legend.title = element_text(size=15))
access.boston <- boston.ggmap + geom_polygon(data=boston_cells.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.87)+
scale_fill_gradient(low = "lightskyblue1", high = "deepskyblue4", name='walking duration (minutes)') +
theme(legend.position = "bottom", legend.text = element_text(size = 12, colour = 'black'),
legend.title = element_text(size=15))
access.boston
access.boston_groc <- boston.ggmap + geom_polygon(data=boston_cells_groc.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.9) +
scale_fill_gradient(low = "darkorchid1", high = "darkred", name='walking duration to supermarkets (minutes)')+
theme(legend.position = "bottom", legend.text = element_text(size = 12, colour = 'black'),
legend.title = element_text(size=15))
access.boston_groc
access.boston_groc <- boston.ggmap + geom_polygon(data=boston_cells_groc.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.9) +
scale_fill_gradient(low = "orchid1", high = "orchid4", name='walking duration to supermarkets (minutes)')+
theme(legend.position = "bottom", legend.text = element_text(size = 12, colour = 'black'),
legend.title = element_text(size=15))
access.boston_groc
access.boston_groc <- boston.ggmap + geom_polygon(data=boston_cells_groc.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.87) +
scale_fill_gradient(low = "plum1", high = "mediumorchid2", name='walking duration to supermarkets (minutes)')+
theme(legend.position = "bottom", legend.text = element_text(size = 12, colour = 'black'),
legend.title = element_text(size=15))
access.boston_groc
access.boston_groc <- boston.ggmap + geom_polygon(data=boston_cells_groc.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.95) +
scale_fill_gradient(low = "plum1", high = "mediumorchid2", name='walking duration to supermarkets (minutes)')+
theme(legend.position = "bottom", legend.text = element_text(size = 12, colour = 'black'),
legend.title = element_text(size=15))
access.boston_groc
access_mean_cell_park <- subset(access_mean_cell, category=="park")
boston_cells_park <- boston_cells
boston_cells_park@data <- left_join(boston_cells_park@data, access_mean_cell_groc, by = c("id_grid" = "id_grid"))
boston_cells_park.fort <- ggplot2::fortify(access_mean_cell_park, region="id_grid")
boston_cells_park.fort_merge <- merge(boston_cells_park.fort, boston_cells_park@data, by.x="id", by.y="id_grid")
View(boston_cells_park.fort)
boston_cells_park.fort_merge <- merge(boston_cells_park.fort, boston_cells_park@data, by="id_grid")
View(boston_cells_park.fort_merge)
access_mean_cell_park
access.boston_park <- boston.ggmap + geom_polygon(data=boston_cells_park.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.95) +
scale_fill_gradient(low = "green1", high = "green4", name='walking duration to supermarkets (minutes)')+
theme(legend.position = "bottom", legend.text = element_text(size = 12, colour = 'black'),
legend.title = element_text(size=15))
access.boston_park
View(boston_cells_park.fort_merge)
View(boston_cells_groc.fort_merge)
View(boston_cells_park.fort)
boston_cells_park.fort <- ggplot2::fortify(access_mean_cell_park, region="id_grid")
View(boston_cells_park.fort)
access_mean_cell_park <- subset(access_mean_cell, category=="park")
boston_cells_park <- boston_cells
boston_cells_park@data <- left_join(boston_cells_park@data, access_mean_cell_park, by = c("id_grid" = "id_grid"))
boston_cells_park.fort <- ggplot2::fortify(access_mean_cell_park, region="id_grid")
View(boston_cells_park.fort)
boston_cells.fort
View(access_mean_cell_park)
View(access_mean_cell_park)
boston_cells_park.fort <- ggplot2::fortify(access_mean_cell_park, region="id_grid")
View(boston_cells_park.fort)
boston_cells_park.fort <- ggplot2::fortify(boston_cells_park, region="id_grid")
boston_cells_park.fort_merge <- merge(boston_cells_park.fort, boston_cells_park@data, by="id_grid")
boston_cells_park.fort_merge <- merge(boston_cells_park.fort, boston_cells_park@data, by.x="id", by.y="id_grid")
access.boston_park <- boston.ggmap + geom_polygon(data=boston_cells_park.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time), alpha=0.95) +
scale_fill_gradient(low = "green1", high = "green4", name='walking duration to supermarkets (minutes)')+
theme(legend.position = "bottom", legend.text = element_text(size = 12, colour = 'black'),
legend.title = element_text(size=15))
access.boston_park
View(boston_cells_park.fort_merge)
access.boston_park <- boston.ggmap + geom_polygon(data=boston_cells_park.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time.y), alpha=0.95) +
scale_fill_gradient(low = "green1", high = "green4", name='walking duration to supermarkets (minutes)')+
theme(legend.position = "bottom", legend.text = element_text(size = 12, colour = 'black'),
legend.title = element_text(size=15))
View(boston_cells_park.fort_merge)
access.boston_park
access.boston_park <- boston.ggmap + geom_polygon(data=boston_cells_park.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time.y), alpha=0.95) +
scale_fill_gradient(low = "palegreen1", high = "palegreen4", name='walking duration to supermarkets (minutes)')+
theme(legend.position = "bottom", legend.text = element_text(size = 12, colour = 'black'),
legend.title = element_text(size=15))
access.boston_park
access.boston_park <- boston.ggmap + geom_polygon(data=boston_cells_park.fort_merge, aes(x=long, y=lat, group=group, fill=mean_walking_time.y), alpha=0.95) +
scale_fill_gradient(low = "palegreen1", high = "palegreen4", name='walking duration to parks (minutes)')+
theme(legend.position = "bottom", legend.text = element_text(size = 12, colour = 'black'),
legend.title = element_text(size=15))
access.boston_park
save.image("~/Dropbox (MIT)/OECD/GOV/Accessibility/first_results.RData")
View(access_mean_cell)
View(boston_cells.fort_merge)
View(access_levels)
View(distances_analysis)
View(distances_analysis)
View(boston_cells@data)
View(boston_cells@data)
View(pop_points_boston)
1095/194
map_export <- left_join(boston_cells@data, access_mean_cell, by = c("id_grid" = "id_grid"))
library(dplyr)
map_export <- left_join(boston_cells@data, access_mean_cell, by = c("id_grid" = "id_grid"))
View(map_export)
colnames(map_export)[1] <- "pop"
setwd("~/Dropbox (MIT)/NEU/Courses/MIT 4.032 Data Viz/final/data")
write.csv(map_export, file="data.csv", row.names = F, sep=",")
unique(map_export$id_grid)
length(unique(map_export$id_grid))
length(unique(map_export$category))
max_category <- map_export %>% group_by(category) %>%
summarise(max = max(mean_walking_time))
View(max_category)
View(distances_analysis)
View(boston_distances_analysis_sub)
View(boston_distances_analysis)
View(access_mean_cell_all)
View(access_mean_cell)
unique(access_mean_cell$category)
